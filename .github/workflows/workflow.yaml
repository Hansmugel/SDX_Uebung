name: Continuous Integration and Testing

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: 'ghcr.io/hansmugel/sdx_uebung:latest'
  IMAGE_TAG: latest

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main



jobs:
  lint:
    name: Lint Go
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54
          working-directory: src

  build:
    needs: lint
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: 'ghcr.io/hansmugel/sdx_uebung:latest'
          load: true

  scan:
    needs: build
    name: Scan Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/hansmugel/sdx_uebung:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

  test:
    needs: scan
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker environment
        uses: docker/setup-buildx-action@v1

      - name: Start Application and Database
        run: |
          # Start your application with docker-compose or any other way you prefer
          docker-compose up -d

      - name: Wait for Application to be ready
        run: sleep 30 # Adjust this sleep time based on your application startup time

      - name: Run Tests
        run: |
          # Run your testing script here. It could be a shell script, a Python script, or any testing framework commands.
          python test_script.py # Assuming you have a python script for testing
